(()=>{"use strict";const e=(()=>{function e(){document.getElementById("tasks-container").innerHTML="";let e=t.getProjectArrayLength();if(e)for(let n=0;n<e;n++){const e=document.getElementById("tasks-container");let o=document.createElement("div");o.classList.add("task-item"),o.setAttribute("data-index",n);let c=document.createElement("input");c.setAttribute("type","checkbox"),c.setAttribute("data-index",n),c.addEventListener("click",(e=>{let t=e.target.getAttribute("data-index");document.querySelector(`div[data-index='${t}']`).classList.toggle("complete-task")}));let d=document.createElement("p");d.textContent=t.getItem(n).title,d.setAttribute("data-index",n);let r=document.createElement("i");r.setAttribute("class","fas fa-ellipsis-h"),o.appendChild(c),o.appendChild(d),o.appendChild(r),o.addEventListener("click",(e=>i(e))),o.addEventListener("click",(()=>{})),e.appendChild(o)}}function n(e,t){let n=document.querySelector(".description"),i=document.getElementById("no-task-default-view");"hide"===e&&(n.classList.add("hidden"),i.classList.remove("hidden")),"show"===e&&(n.classList.remove("hidden"),n.setAttribute("data-index-array",`${t}`),i.classList.add("hidden"))}function i(e){if("INPUT"===e.target.tagName||"I"===e.target.tagName)return;let i=e.target.getAttribute("data-index"),o=document.querySelector("textarea");if(document.querySelector(".description-title > input").value=t.getItem(i).title,n("show",i),!t.getItem(i).description)return o.value="";o.value=t.getItem(i).description}function o(){let e=t.getProjectArrayLength()-1,i=document.querySelector("textarea");if(document.querySelector(".description-title > input").value=t.getItem(e).title,n("show",e),!t.getItem(e).description)return i.value="";i.value=t.getItem(e).description}return{addTask:function(){const t=document.getElementById("task-input");t.value&&(e(),t.value="",o())},switchProject:function(i){let o=document.querySelector(".selected");const c=document.getElementById("project-name");o.classList.remove("selected"),i.classList.add("selected"),c.textContent=t.getCurrentProject(),n("hide"),e()},drawAllTasks:function(){e()},editTitle:function(e,t){document.querySelector(`p[data-index='${e}']`).innerText=String(t)},showLastItem:o}})(),t=(()=>{let t={Today:[],Upcoming:[],Inbox:[{title:"Welcome to Todo",description:"This is a default description, edit me!"},{title:"What can you do with Todo?",description:"This is another default description."}]},n="Inbox",i=t[`${n}`];function o(e,t,n,i,o){const c={};return e&&(c.title=e),c.description=t,c.due=n,c.priority=i,c.completion=o,c}return{newTask:function(){let i=t[`${n}`];const c=document.getElementById("task-input");c.value&&(i.push(o(c.value)),console.table(i),e.addTask(),e.showLastItem())},switchProject:function(o){let c=o.target;i=t[`${c.textContent}`],n=c.textContent,console.log("Switched to: "+n),console.table(i),e.switchProject(c)},getCurrentProject:function(){return n},getItem:function(e){return t[`${n}`][e]},getProjectArrayLength:function(){return t[`${n}`].length},createDefaultInbox:function(){let e=t.Inbox;e.push(o("Welcome to Todo","This is a default description. Edit me!")),e.push(o("What can you do with Todo?","This is another default description."))},saveDescription:function(){let e=document.querySelector(".description").getAttribute("data-index-array"),t=document.querySelector("textarea");e&&(i[e].description=t.value)},saveTitle:function(){let t=document.querySelector(".description").getAttribute("data-index-array"),n=document.querySelector(".description-title > input").value;e.editTitle(t,n),i[t].title=n}}})();console.log("Todo App"),document.getElementById("add-task-btn").addEventListener("click",(()=>t.newTask())),document.getElementById("task-input").addEventListener("keypress",(e=>{"Enter"===e.key&&t.newTask()})),document.querySelectorAll(".project").forEach((e=>{e.addEventListener("click",(e=>t.switchProject(e)))})),document.querySelector("textarea").addEventListener("change",t.saveDescription),document.querySelector(".description-title > input").addEventListener("change",t.saveTitle),e.drawAllTasks()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,