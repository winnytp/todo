(()=>{"use strict";const e=(()=>{function e(){let e=this.getAttribute("data-name");document.querySelector(`li[data-name='${e}']`).remove()}function n(){document.getElementById("tasks-container").innerHTML="";let e=t.getProjectArrayLength();if(e)for(let n=0;n<e;n++){const e=document.getElementById("tasks-container");let i=document.createElement("div");i.classList.add("task-item"),i.setAttribute("data-index",n);let c=document.createElement("input");c.setAttribute("type","checkbox"),c.setAttribute("data-index",n),"yes"===t.getItem(n).completed&&(c.setAttribute("checked",""),i.classList.add("complete-task")),c.addEventListener("click",(e=>{let n=e.target.getAttribute("data-index");document.querySelector(`div[data-index='${n}']`).classList.toggle("complete-task"),"yes"===t.getItem(n).completed?t.getItem(n).completed="no":t.getItem(n).completed="yes",console.log("Is the item completed: "+t.getItem(n).completed)}));let o=document.createElement("p");o.textContent=t.getItem(n).title,o.setAttribute("data-index",n);let s=document.createElement("i");s.setAttribute("class","fas fa-times"),s.setAttribute("data-index",n),s.addEventListener("click",a),i.appendChild(c),i.appendChild(o),i.appendChild(s),i.addEventListener("click",(e=>d(e))),i.addEventListener("click",(()=>{let e=document.querySelector(".highlight-task");e&&e.classList.toggle("highlight-task"),i.classList.toggle("highlight-task")})),e.appendChild(i)}}function i(e,t){let n=document.querySelector(".description"),i=document.getElementById("no-task-default-view");"hide"===e&&(n.classList.add("hidden"),i.classList.remove("hidden")),"show"===e&&(n.classList.remove("hidden"),n.setAttribute("data-index-array",`${t}`),i.classList.add("hidden"))}function d(e){if("INPUT"===e.target.tagName||"I"===e.target.tagName)return;let n=e.target.getAttribute("data-index"),d=document.querySelector("textarea"),c=document.querySelector(".description-title > input");const o=document.querySelector("input[type=date]");c.value=t.getItem(n).title,i("show",n),o.setAttribute("data-index",n),t.getItem(n).description||(d.value=""),t.getItem(n).description&&(d.value=t.getItem(n).description),t.getItem(n).date||(o.value=""),t.getItem(n).date&&(o.value=t.getItem(n).date),console.log(t.getItem(n).date)}function c(){let e=t.getProjectArrayLength()-1,n=document.querySelector("textarea"),d=document.querySelector(".description-title > input");if(document.querySelector("input[type=date]").setAttribute("data-index",e),d.value=t.getItem(e).title,i("show",e),!t.getItem(e).description)return n.value="";n.value=t.getItem(e).description}function o(){document.querySelector("input[type=date]").value=""}function a(){const e=this.getAttribute("data-index");document.querySelector(`.task-item[data-index='${e}']`).remove(),t.removeItem(e),i("hide"),n()}return{addTask:function(){const e=document.getElementById("task-input");e.value&&(n(),e.value="",c(),o())},switchProject:function(e){let d=document.querySelector(".selected");const c=document.getElementById("project-name");d&&d.classList.remove("selected"),e.classList.add("selected"),c.textContent=t.getCurrentProject(),i("hide"),n(),o()},drawAllTasks:function(){n()},editTitle:function(e,t){document.querySelector(`p[data-index='${e}']`).innerText=String(t)},showLastItem:c,createProject:function(n){const i=document.querySelector("#lists-view > ul"),d=document.createElement("li");d.classList.add("project"),d.innerText=n,d.setAttribute("data-name",n),d.addEventListener("click",(e=>t.switchProject(e)));const c=document.createElement("span");c.classList.add("remove-list"),c.setAttribute("data-name",n),c.addEventListener("click",e);const o=document.createElement("i");o.setAttribute("class","fas fa-times-circle");const a=document.getElementById("new-list-input");a.value="",a.classList.toggle("hidden"),document.getElementById("new-list").classList.toggle("add-list-focus"),c.appendChild(o),d.appendChild(c),i.appendChild(d)}}})(),t=(()=>{let t={Inbox:[{title:"Welcome to Todo",description:"This is a default description, edit me!"},{title:"What can you do with Todo?",description:"This is another default description."},{title:"Check out my Github",description:"Find me @winnytp"}],"Example List":[{title:"This is an example title",description:"This is an example description"}]},n="Inbox",i=t[`${n}`];function d(e,t,n,i,d){const c={};return e&&(c.title=e),c.description=t,c.date=n,c.priority=i,c.completed=d,c}return{newTask:function(){let i=t[`${n}`];const c=document.getElementById("task-input");c.value&&(i.push(d(c.value)),console.table(i),e.addTask())},switchProject:function(d){let c=d.target;i=t[`${c.textContent}`],i&&(n=c.textContent,console.log("Switched to: "+n),console.table(i),e.switchProject(c))},addProject:function(){let n=document.getElementById("new-list-input").value;t[`${n}`]=[],console.log(t[`${n}`]),e.createProject(n)},getCurrentProject:function(){return n},getItem:function(e){return t[`${n}`][e]},getProjectArrayLength:function(){return t[`${n}`].length},createDefaultInbox:function(){let e=t.Inbox;e.push(d("Welcome to Todo","This is a default description. Edit me!")),e.push(d("What can you do with Todo?","This is another default description."))},saveDescription:function(){let e=document.querySelector(".description").getAttribute("data-index-array"),t=document.querySelector("textarea");e&&(i[e].description=t.value)},saveTitle:function(){let t=document.querySelector(".description").getAttribute("data-index-array"),n=document.querySelector(".description-title > input").value;e.editTitle(t,n),i[t].title=n},saveDate:function(){let e=this.getAttribute("data-index");const t=document.querySelector("input[type=date]");i[e].date=t.value,console.log(t.value+" was saved in "+n+" (index: "+e+")")},removeItem:function(e){i.splice(e,1)}}})();console.log("Todo App"),document.getElementById("add-task-btn").addEventListener("click",(()=>t.newTask())),document.getElementById("task-input").addEventListener("keypress",(e=>{"Enter"===e.key&&t.newTask()})),document.querySelectorAll(".project").forEach((e=>{e.addEventListener("click",(e=>t.switchProject(e)))})),document.querySelector("textarea").addEventListener("change",t.saveDescription),document.querySelector(".description-title > input").addEventListener("change",t.saveTitle),document.querySelector("input[type=date]").addEventListener("change",t.saveDate),document.getElementById("new-list").addEventListener("click",(()=>{document.getElementById("new-list-input").classList.toggle("hidden"),document.getElementById("new-list").classList.toggle("add-list-focus")})),document.getElementById("new-list-input").addEventListener("keypress",(e=>{"Enter"===e.key&&t.addProject()})),e.createProject("Example List"),e.drawAllTasks()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,